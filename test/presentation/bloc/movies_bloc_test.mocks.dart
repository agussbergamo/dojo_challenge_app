// Mocks generated by Mockito 5.4.5 from annotations
// in dojo_challenge_app/test/presentation/bloc/movies_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dojo_challenge_app/core/parameter/data_source.dart' as _i6;
import 'package:dojo_challenge_app/domain/entities/movie.dart' as _i5;
import 'package:dojo_challenge_app/domain/repositories/i_movie_repository.dart'
    as _i2;
import 'package:dojo_challenge_app/domain/usecases/implementations/movies_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIMoviesRepository_0 extends _i1.SmartFake
    implements _i2.IMoviesRepository {
  _FakeIMoviesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesUseCase extends _i1.Mock implements _i3.MoviesUseCase {
  MockMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IMoviesRepository get moviesRepository => (super.noSuchMethod(
        Invocation.getter(#moviesRepository),
        returnValue: _FakeIMoviesRepository_0(
          this,
          Invocation.getter(#moviesRepository),
        ),
      ) as _i2.IMoviesRepository);

  @override
  _i4.Future<List<_i5.Movie>> call({_i6.DataSource? dataSource}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#dataSource: dataSource},
        ),
        returnValue: _i4.Future<List<_i5.Movie>>.value(<_i5.Movie>[]),
      ) as _i4.Future<List<_i5.Movie>>);
}
