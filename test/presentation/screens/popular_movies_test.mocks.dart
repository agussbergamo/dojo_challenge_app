// Mocks generated by Mockito 5.4.5 from annotations
// in dojo_challenge_app/test/presentation/screens/popular_movies_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dojo_challenge_app/core/parameter/data_source.dart' as _i6;
import 'package:dojo_challenge_app/data/repositories/movie_repository.dart'
    as _i2;
import 'package:dojo_challenge_app/domain/entities/movie.dart' as _i5;
import 'package:dojo_challenge_app/presentation/bloc/movies_bloc.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesBloc extends _i1.Mock implements _i3.MoviesBloc {
  MockMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i4.Stream<List<_i5.Movie>> get moviesStream => (super.noSuchMethod(
        Invocation.getter(#moviesStream),
        returnValue: _i4.Stream<List<_i5.Movie>>.empty(),
      ) as _i4.Stream<List<_i5.Movie>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> getPopularMovies(_i6.DataSource? dataSource) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [dataSource],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
