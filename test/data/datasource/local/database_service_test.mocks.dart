// Mocks generated by Mockito 5.4.5 from annotations
// in dojo_challenge_app/test/data/datasource/local/database_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dojo_challenge_app/data/datasource/local/DAOs/movie_dao.dart'
    as _i2;
import 'package:dojo_challenge_app/data/datasource/local/database.dart' as _i5;
import 'package:dojo_challenge_app/domain/entities/movie.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDao_0 extends _i1.SmartFake implements _i2.MovieDao {
  _FakeMovieDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_1<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_2 extends _i1.SmartFake
    implements _i4.DatabaseExecutor {
  _FakeDatabaseExecutor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i5.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieDao get movieDao => (super.noSuchMethod(
        Invocation.getter(#movieDao),
        returnValue: _FakeMovieDao_0(
          this,
          Invocation.getter(#movieDao),
        ),
      ) as _i2.MovieDao);

  @override
  _i3.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_1<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i3.StreamController<String>);

  @override
  set changeListener(_i3.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_2(
          this,
          Invocation.getter(#database),
        ),
      ) as _i4.DatabaseExecutor);

  @override
  set database(_i4.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i2.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Movie>> getMovies() => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i3.Future<List<_i6.Movie>>);

  @override
  _i3.Stream<_i6.Movie?> getMovieById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMovieById,
          [id],
        ),
        returnValue: _i3.Stream<_i6.Movie?>.empty(),
      ) as _i3.Stream<_i6.Movie?>);

  @override
  _i3.Future<void> insertMovie(_i6.Movie? movie) => (super.noSuchMethod(
        Invocation.method(
          #insertMovie,
          [movie],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
