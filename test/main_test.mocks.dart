// Mocks generated by Mockito 5.4.5 from annotations
// in dojo_challenge_app/test/main_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dojo_challenge_app/data/datasource/local/database.dart' as _i3;
import 'package:dojo_challenge_app/data/datasource/local/database_service.dart'
    as _i7;
import 'package:dojo_challenge_app/data/repositories/movie_repository.dart'
    as _i2;
import 'package:dojo_challenge_app/domain/entities/movie.dart' as _i6;
import 'package:dojo_challenge_app/presentation/bloc/movies_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppDatabase_1 extends _i1.SmartFake implements _i3.AppDatabase {
  _FakeAppDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesBloc extends _i1.Mock implements _i4.MoviesBloc {
  MockMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i5.Stream<List<_i6.Movie>> get moviesStream => (super.noSuchMethod(
        Invocation.getter(#moviesStream),
        returnValue: _i5.Stream<List<_i6.Movie>>.empty(),
      ) as _i5.Stream<List<_i6.Movie>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> getPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i7.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AppDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeAppDatabase_1(
          this,
          Invocation.getter(#database),
        ),
      ) as _i3.AppDatabase);

  @override
  _i5.Future<List<_i6.Movie>> getMovies() => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);

  @override
  _i5.Future<void> insertMovie(_i6.Movie? movie) => (super.noSuchMethod(
        Invocation.method(
          #insertMovie,
          [movie],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
